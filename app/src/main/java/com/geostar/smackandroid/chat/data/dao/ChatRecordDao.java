package com.geostar.smackandroid.chat.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.geostar.smackandroid.chat.data.dao.ChatRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "chat_record_table".
*/
public class ChatRecordDao extends AbstractDao<ChatRecord, Long> {

    public static final String TABLENAME = "chat_record_table";

    /**
     * Properties of entity ChatRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Identify = new Property(1, String.class, "identify", false, "identify");
        public final static Property ChatOjbects = new Property(2, String.class, "chatOjbects", false, "chatOjbects");
        public final static Property Type = new Property(3, String.class, "type", false, "type");
        public final static Property Name = new Property(4, String.class, "name", false, "type");
        public final static Property ChatRecordDBPath = new Property(5, String.class, "chatRecordDBPath", false, "chat_record_db_path");
    };


    public ChatRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ChatRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"chat_record_table\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"identify\" TEXT," + // 1: identify
                "\"chatOjbects\" TEXT," + // 2: chatOjbects
                "\"type\" TEXT," + // 3: type
                "\"type\" TEXT," + // 4: name
                "\"chat_record_db_path\" TEXT);"); // 5: chatRecordDBPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"chat_record_table\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String identify = entity.getIdentify();
        if (identify != null) {
            stmt.bindString(2, identify);
        }
 
        String chatOjbects = entity.getChatOjbects();
        if (chatOjbects != null) {
            stmt.bindString(3, chatOjbects);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String chatRecordDBPath = entity.getChatRecordDBPath();
        if (chatRecordDBPath != null) {
            stmt.bindString(6, chatRecordDBPath);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatRecord readEntity(Cursor cursor, int offset) {
        ChatRecord entity = new ChatRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // identify
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chatOjbects
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // chatRecordDBPath
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdentify(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChatOjbects(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChatRecordDBPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
